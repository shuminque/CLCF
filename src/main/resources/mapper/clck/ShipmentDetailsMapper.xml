<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.depository_manage.mapper.clck.ShipmentDetailsMapper">

    <!-- ResultMap 定义 -->
    <resultMap id="shipmentDetailsMap" type="com.depository_manage.entity.ShipmentDetails">
        <id column="id" property="id"/>
        <result column="unique_identifier" property="uniqueIdentifier"/>
        <result column="invoice_number" property="invoiceNumber"/>
        <result column="customer" property="customer"/>
        <result column="trade_mode" property="tradeMode"/>
        <result column="delivery_point" property="deliveryPoint"/>
        <result column="arrival_port_date" property="arrivalPortDate" jdbcType="DATE"/>
        <result column="arrival_date" property="arrivalDate" jdbcType="DATE"/>
        <result column="steel_grade" property="steelGrade"/>
        <result column="dimensions" property="dimensions"/>
        <result column="weight" property="weight" jdbcType="DOUBLE"/>
        <result column="steel_mill" property="steelMill"/>
        <result column="furnace_number" property="furnaceNumber"/>
        <result column="invoice_application" property="invoiceApplication"/>
        <result column="operation_type" property="operationType"/>
        <result column="supplier_batch_number" property="supplierBatchNumber"/>
        <result column="bundle_count" property="bundleCount" jdbcType="INTEGER"/>
        <result column="placement_area" property="placementArea"/>
        <result column="purchaser" property="purchaser"/>
        <result column="time" property="time"/>
    </resultMap>

    <!-- 插入操作 -->
    <insert id="insertShipmentDetail" parameterType="com.depository_manage.entity.ShipmentDetails">
        INSERT INTO shipment_details (
            unique_identifier, invoice_number, customer, trade_mode, delivery_point, arrival_port_date,
            arrival_date, steel_grade, dimensions, weight, steel_mill, furnace_number, invoice_application,
            operation_type, supplier_batch_number, bundle_count, placement_area, purchaser, time
        ) VALUES (
                     #{uniqueIdentifier}, #{invoiceNumber}, #{customer}, #{tradeMode}, #{deliveryPoint}, #{arrivalPortDate},
                     #{arrivalDate}, #{steelGrade}, #{dimensions}, #{weight}, #{steelMill}, #{furnaceNumber}, #{invoiceApplication},
                     #{operationType}, #{supplierBatchNumber}, #{bundleCount}, #{placementArea}, #{purchaser}, #{time}
                 )
    </insert>

    <!-- Batch insert operation -->
    <insert id="insertShipmentDetails" parameterType="java.util.List">
        INSERT INTO shipment_details (
        unique_identifier, invoice_number, customer, trade_mode, delivery_point, arrival_port_date,
        arrival_date, steel_grade, dimensions, weight, steel_mill, furnace_number, invoice_application,
        operation_type, supplier_batch_number, bundle_count, placement_area, purchaser, time
        ) VALUES
        <foreach collection="list" item="detail" separator=",">
            (
            #{detail.uniqueIdentifier}, #{detail.invoiceNumber}, #{detail.customer}, #{detail.tradeMode}, #{detail.deliveryPoint},
            #{detail.arrivalPortDate}, #{detail.arrivalDate}, #{detail.steelGrade}, #{detail.dimensions}, #{detail.weight},
            #{detail.steelMill}, #{detail.furnaceNumber}, #{detail.invoiceApplication},
            #{detail.operationType}, #{detail.supplierBatchNumber}, #{detail.bundleCount}, #{detail.placementArea},
             #{detail.purchaser}, #{detail.time}
            )
        </foreach>
    </insert>

    <!-- 使用resultMap的查询 -->
    <select id="selectShipmentDetailById" parameterType="int" resultMap="shipmentDetailsMap">
        SELECT * FROM shipment_details WHERE id = #{id}
    </select>

    <!-- 查询所有记录操作 -->
    <select id="selectAllShipmentDetails" resultMap="shipmentDetailsMap" parameterType="map">
        SELECT * FROM shipment_details WHERE 1=1
        <if test="operationType != null">
            <choose>
                <when test="operationType == 'none'">
                    AND operation_type IS NULL
                </when>
                <otherwise>
                    AND operation_type = #{operationType}
                </otherwise>
            </choose>
        </if>
        <if test="uniqueIdentifier != null and uniqueIdentifier != ''">
            AND unique_identifier = #{uniqueIdentifier}
        </if>
        <if test="invoiceNumber != null and invoiceNumber != ''">
            AND invoice_number = #{invoiceNumber}
        </if>
        <if test="customer != null and customer != ''">
            AND customer = #{customer}
        </if>
        <if test="tradeMode != null and tradeMode != ''">
            AND trade_mode = #{tradeMode}
        </if>
        <if test="steelGrade != null and steelGrade != ''">
            AND steel_grade = #{steelGrade}
        </if>
        <if test="dimensions != null and dimensions != ''">
            AND dimensions = #{dimensions}
        </if>
        <if test="steelMill != null and steelMill != ''">
            AND steel_mill = #{steelMill}
        </if>
        <if test="supplierBatchNumber != null and steelMill != ''">
            AND supplier_batch_number LIKE CONCAT('%',#{supplierBatchNumber},'%')
        </if>
        <if test="furnaceNumber != null and furnaceNumber != ''">
            AND furnace_number LIKE CONCAT('%',#{furnaceNumber},'%')
        </if>
        <if test="placementArea != null">
            <choose>
                <when test="placementArea == 'empty'">
                    AND placement_area IS NULL
                </when>
                <otherwise>
                    AND placement_area = #{placementArea}
                </otherwise>
            </choose>
        </if>
        <if test="purchaser != null and purchaser != ''">
            AND purchaser = #{purchaser}
        </if>
        <if test="startDate != null and endDate != null">
            AND DATE(arrival_date) BETWEEN #{startDate} AND #{endDate}
        </if>
        <if test="startDate2 != null and endDate2 != null">
            AND DATE(`time`) BETWEEN #{startDate2} AND #{endDate2}
        </if>
        ORDER BY id DESC
        <if test="begin != null and size != null">
            LIMIT #{begin},#{size}
        </if>
    </select>
    <select id="countShipmentDetails" resultType="int" parameterType="map">
        SELECT COUNT(*) FROM shipment_details WHERE 1=1
        <if test="operationType != null">
            <choose>
                <when test="operationType == 'none'">
                    AND operation_type IS NULL
                </when>
                <otherwise>
                    AND operation_type = #{operationType}
                </otherwise>
            </choose>
        </if>
        <if test="uniqueIdentifier != null and uniqueIdentifier != ''">
            AND unique_identifier = #{uniqueIdentifier}
        </if>
        <if test="invoiceNumber != null and invoiceNumber != ''">
            AND invoice_number = #{invoiceNumber}
        </if>
        <if test="customer != null and customer != ''">
            AND customer = #{customer}
        </if>
        <if test="tradeMode != null and tradeMode != ''">
            AND trade_mode = #{tradeMode}
        </if>
        <if test="steelGrade != null and steelGrade != ''">
            AND steel_grade = #{steelGrade}
        </if>
        <if test="dimensions != null and dimensions != ''">
            AND dimensions = #{dimensions}
        </if>
        <if test="steelMill != null and steelMill != ''">
            AND steel_mill = #{steelMill}
        </if>
        <if test="supplierBatchNumber != null and steelMill != ''">
            AND supplier_batch_number LIKE CONCAT('%',#{supplierBatchNumber},'%')
        </if>
        <if test="furnaceNumber != null and furnaceNumber != ''">
            AND furnace_number LIKE CONCAT('%',#{furnaceNumber},'%')
        </if>
        <if test="placementArea != null">
            <choose>
                <when test="placementArea == 'empty'">
                    AND placement_area IS NULL
                </when>
                <otherwise>
                    AND placement_area = #{placementArea}
                </otherwise>
            </choose>
        </if>
        <if test="purchaser != null and purchaser != ''">
            AND purchaser = #{purchaser}
        </if>
        <if test="startDate != null and endDate != null">
            AND DATE(arrival_date) BETWEEN #{startDate} AND #{endDate}
        </if>
        <if test="startDate2 != null and endDate2 != null">
            AND DATE(`time`) BETWEEN #{startDate2} AND #{endDate2}
        </if>
    </select>

    <!-- 更新操作 -->
    <update id="updateShipmentDetail">
        UPDATE shipment_details
        <set>
            <if test="uniqueIdentifier != null">unique_identifier = #{uniqueIdentifier},</if>
            <if test="invoiceNumber != null">invoice_number = #{invoiceNumber},</if>
            <if test="customer != null">customer = #{customer},</if>
            <if test="tradeMode != null">trade_mode = #{tradeMode},</if>
            <if test="deliveryPoint != null">delivery_point = #{deliveryPoint},</if>
            <if test="arrivalPortDate != null">arrival_port_date = #{arrivalPortDate},</if>
            <if test="arrivalDate != null">arrival_date = #{arrivalDate},</if>
            <if test="steelGrade != null">steel_grade = #{steelGrade},</if>
            <if test="dimensions != null">dimensions = #{dimensions},</if>
            <if test="weight != null">weight = #{weight},</if>
            <if test="steelMill != null">steel_mill = #{steelMill},</if>
            <if test="furnaceNumber != null">furnace_number = #{furnaceNumber},</if>
            <if test="invoiceApplication != null">invoice_application = #{invoiceApplication},</if>
            <if test="operationType != null">operation_type = #{operationType},</if>
            <if test="supplierBatchNumber != null">supplier_batch_number = #{supplierBatchNumber},</if>
            <if test="bundleCount != null">bundle_count = #{bundleCount},</if>
            <if test="placementArea != null">placement_area = #{placementArea},</if>
            <if test="purchaser != null">purchaser = #{purchaser},</if>
            <if test="time != null">time = #{time},</if>
        </set>
        WHERE id = #{id}
    </update>


    <!-- 删除操作 -->
    <delete id="deleteShipmentDetail" parameterType="int">
        DELETE FROM shipment_details WHERE id = #{id}
    </delete>
    <delete id="batchDeleteShipmentDetails" parameterType="list">
        DELETE FROM shipment_details WHERE id IN
        <foreach item="id" collection="ids" open="(" separator="," close=")">
            #{id}
        </foreach>
    </delete>
    <!-- 更新 operation_type, placement_area 和 time -->
    <update id="updateOperationTypeByUniqueIdentifier" parameterType="com.depository_manage.entity.ShipmentDetails">
        UPDATE shipment_details
        SET operation_type = #{operationType},
            placement_area = #{placementArea},
            time = #{time}
        WHERE unique_identifier = #{uniqueIdentifier}
          AND (operation_type IS NULL OR operation_type = '')
    </update>
    <!-- 根据 unique_identifier 查询在库记录 -->
    <select id="findStockInByUniqueIdentifier" parameterType="string" resultMap="shipmentDetailsMap">
        SELECT * FROM shipment_details
        WHERE unique_identifier = #{uniqueIdentifier}
          AND (operation_type = '入库' OR operation_type = '转库')
        ORDER BY id DESC
            LIMIT 1
    </select>
    <!-- 根据 unique_identifier 查询在库或转库记录 -->
    <select id="findStockInOrTransferByUniqueIdentifier" parameterType="string" resultMap="shipmentDetailsMap">
        SELECT * FROM shipment_details
        WHERE unique_identifier = #{uniqueIdentifier}
          AND (operation_type = '入库' OR operation_type = '转库' OR operation_type = '返库')
        ORDER BY id DESC
            LIMIT 1
    </select>

    <!-- 计算净入库数量 -->
    <select id="getNetStockInCountByUniqueIdentifier" resultType="int">
        SELECT (SELECT COUNT(*) FROM shipment_details
                WHERE unique_identifier = #{uniqueIdentifier}
                AND operation_type = '入库'
               ) +
               (SELECT COUNT(*) FROM shipment_details
                WHERE unique_identifier = #{uniqueIdentifier}
                AND operation_type = '返库'
                ) -
               (SELECT COUNT(*) FROM shipment_details
                WHERE unique_identifier = #{uniqueIdentifier}
                AND operation_type = '出库'
               )   AS netStockInCount
    </select>

    <!-- 查询在截止日期前的在库情况 -->
        <select id="getStockStatusBeforeCutoffDate" resultMap="shipmentDetailsMap" parameterType="map">
            WITH in_out_count AS (
            SELECT
            unique_identifier,
            SUM(CASE WHEN operation_type in ('入库', '返库') THEN 1 ELSE 0 END) AS in_count,
            SUM(CASE WHEN operation_type = '出库' THEN 1 ELSE 0 END) AS out_count
            FROM
            shipment_details
            WHERE
            time &lt;= #{cutoffDate}
            <if test="uniqueIdentifier != null and uniqueIdentifier != ''">
                AND unique_identifier = #{uniqueIdentifier}
            </if>
            <if test="invoiceNumber != null and invoiceNumber != ''">
                AND invoice_number = #{invoiceNumber}
            </if>
            <if test="customer != null and customer != ''">
                AND customer = #{customer}
            </if>
            <if test="tradeMode != null and tradeMode != ''">
                AND trade_mode = #{tradeMode}
            </if>
            <if test="steelGrade != null and steelGrade != ''">
                AND steel_grade = #{steelGrade}
            </if>
            <if test="dimensions != null and dimensions != ''">
                AND dimensions = #{dimensions}
            </if>
            <if test="steelMill != null and steelMill != ''">
                AND steel_mill = #{steelMill}
            </if>
            <if test="supplierBatchNumber != null and supplierBatchNumber != ''">
                AND supplier_batch_number LIKE CONCAT('%',#{supplierBatchNumber},'%')
            </if>
            <if test="furnaceNumber != null and furnaceNumber != ''">
                AND furnace_number LIKE CONCAT('%',#{furnaceNumber},'%')
            </if>
            <if test="purchaser != null and purchaser != ''">
                AND purchaser = #{purchaser}
            </if>
            GROUP BY
            unique_identifier
            HAVING
            in_count > out_count
            ),
            latest_in_info AS (
            SELECT
            sd.*
            FROM
            shipment_details sd
            JOIN (
            SELECT
            unique_identifier,
            MAX(id) AS latest_id
            FROM
            shipment_details
            WHERE
            (operation_type = '入库' OR operation_type = '转库' OR operation_type = '返库')
            AND time &lt;= #{cutoffDate}
            GROUP BY
            unique_identifier
            ) sub ON sd.id = sub.latest_id
            WHERE
            1=1
            <if test="uniqueIdentifier != null and uniqueIdentifier != ''">
                AND sd.unique_identifier = #{uniqueIdentifier}
            </if>
            <if test="invoiceNumber != null and invoiceNumber != ''">
                AND sd.invoice_number = #{invoiceNumber}
            </if>
            <if test="customer != null and customer != ''">
                AND sd.customer = #{customer}
            </if>
            <if test="tradeMode != null and tradeMode != ''">
                AND sd.trade_mode = #{tradeMode}
            </if>
            <if test="steelGrade != null and steelGrade != ''">
                AND sd.steel_grade = #{steelGrade}
            </if>
            <if test="dimensions != null and dimensions != ''">
                AND sd.dimensions = #{dimensions}
            </if>
            <if test="steelMill != null and steelMill != ''">
                AND sd.steel_mill = #{steelMill}
            </if>
            <if test="supplierBatchNumber != null and supplierBatchNumber != ''">
                AND sd.supplier_batch_number LIKE CONCAT('%',#{supplierBatchNumber},'%')
            </if>
            <if test="furnaceNumber != null and furnaceNumber != ''">
                AND sd.furnace_number LIKE CONCAT('%',#{furnaceNumber},'%')
            </if>
            <if test="placementArea != null and placementArea != ''">
                AND sd.placement_area = #{placementArea}
            </if>
            <if test="purchaser != null and purchaser != ''">
                AND sd.purchaser = #{purchaser}
            </if>
            )
            SELECT
            latest_in_info.supplier_batch_number,
            latest_in_info.unique_identifier,
            latest_in_info.invoice_number,
            latest_in_info.delivery_point,
            latest_in_info.arrival_port_date,
            latest_in_info.purchaser,
            latest_in_info.customer,
            latest_in_info.trade_mode,
            latest_in_info.steel_grade,
            latest_in_info.dimensions,
            latest_in_info.weight,
            latest_in_info.bundle_count,
            latest_in_info.steel_mill,
            latest_in_info.furnace_number,
            latest_in_info.placement_area,
            in_out_count.in_count,
            in_out_count.out_count,
            latest_in_info.time,
            latest_in_info.arrival_date,
            latest_in_info.arrival_port_date
            FROM
            latest_in_info
            JOIN
            in_out_count ON latest_in_info.unique_identifier = in_out_count.unique_identifier
            ORDER BY
            latest_in_info.time DESC
            <if test="begin != null and size != null">
                LIMIT #{begin}, #{size}
            </if>
        </select>

    <select id="viewTransfer" parameterType="map" resultType="map">
        SELECT
            id,
            steel_mill,
            steel_grade,
            dimensions,
            weight,
            unique_identifier,
            placement_area AS from_area,
            to_area,
            time
        FROM (
                 SELECT
                     sd.*,
                     LEAD(sd.placement_area) OVER (PARTITION BY sd.unique_identifier ORDER BY sd.time) AS to_area,
                         LEAD(sd.operation_type) OVER (PARTITION BY sd.unique_identifier ORDER BY sd.time) AS next_operation
                 FROM
                     shipment_details sd
                 WHERE
                     sd.operation_type IN ('入库', '转库')
                   AND time BETWEEN #{startDate} AND #{endDate}
             ) AS subquery
        WHERE
            to_area IS NOT NULL
          AND (operation_type = '入库' AND next_operation = '转库') OR (operation_type = '转库' AND next_operation = '转库')
        ORDER BY
            unique_identifier, time;
    </select>

    <select id="getIntoSDs"  resultMap="shipmentDetailsMap" parameterType="map">
        SELECT steel_mill,steel_grade,dimensions,trade_mode,customer, sum(weight) as weight,sum(bundle_count) as bundle_count
        FROM shipment_details
        where operation_type='入库'
        <if test="startDate != null and endDate != null">
            AND DATE(time) BETWEEN #{startDate} AND #{endDate}
        </if>
        <if test="steelMill != null and steelMill != ''">
            AND steel_mill = #{steelMill}
        </if>
        <if test="steelGrade != null and steelGrade != ''">
            AND steel_grade = #{steelGrade}
        </if>
        <if test="dimensions != null and dimensions != ''">
            AND dimensions = #{dimensions}
        </if>
        <if test="tradeMode != null and tradeMode != ''">
            AND trade_mode = #{tradeMode}
        </if>
        <if test="customer != null and customer != ''">
            AND customer = #{customer}
        </if>
        group by  steel_mill,steel_grade,dimensions,trade_mode,customer;
    </select>

    <!-- 获取重量 -->
    <select id="getWeightByUniqueIdentifier" parameterType="String" resultType="double">
        SELECT weight
        FROM shipment_details
        WHERE unique_identifier = #{uniqueIdentifier}
        ORDER BY id DESC
            LIMIT 1
    </select>
    <!-- 饼图厂家 -->
    <select id="getclstatus" resultType="map">
        WITH in_out_count AS (
        SELECT
        unique_identifier,
        SUM(CASE WHEN operation_type in ('入库','返库') THEN 1 ELSE 0 END) AS in_count,
        SUM(CASE WHEN operation_type = '出库' THEN 1 ELSE 0 END) AS out_count
        FROM
        shipment_details
        WHERE
        time &lt;= #{date}
        GROUP BY
        unique_identifier
        HAVING
        in_count > out_count
        ),
        latest_in_info AS (
        SELECT
        sd.*
        FROM
        shipment_details sd
        JOIN (
        SELECT
        unique_identifier,
        MAX(id) AS latest_id
        FROM
        shipment_details
        WHERE
        (operation_type = '入库' OR operation_type = '转库' OR operation_type = '返库')
        AND time &lt;= #{date}
        GROUP BY
        unique_identifier
        ) sub ON sd.id = sub.latest_id
        )
        SELECT  distinct
        latest_in_info.steel_mill,
        sum(latest_in_info.weight) as weight,
        sum(latest_in_info.bundle_count) as bundle_count
        FROM
        latest_in_info
        JOIN
        in_out_count ON latest_in_info.unique_identifier = in_out_count.unique_identifier
        group by latest_in_info.steel_mill
        order by weight asc;
    </select>
    <!-- 饼图棒材尺寸 -->
    <select id="getClstatusByDimensions" resultType="map">
        WITH in_out_count AS (
            SELECT
                unique_identifier,
                SUM(CASE WHEN operation_type in ('入库','返库') THEN 1 ELSE 0 END) AS in_count,
                SUM(CASE WHEN operation_type = '出库' THEN 1 ELSE 0 END) AS out_count
            FROM
                shipment_details
            WHERE
            time &lt;= #{date}
        GROUP BY
            unique_identifier
        HAVING
            in_count > out_count
            ),
            latest_in_info AS (
        SELECT
            sd.*
        FROM
            shipment_details sd
            JOIN (
            SELECT
            unique_identifier,
            MAX(id) AS latest_id
            FROM
            shipment_details
            WHERE
            (operation_type = '入库' OR operation_type = '转库' OR operation_type = '返库')
            AND time &lt;= #{date}
            GROUP BY
            unique_identifier
            ) sub ON sd.id = sub.latest_id
            )
        SELECT  distinct
            latest_in_info.dimensions,
            sum(latest_in_info.weight) as weight,
            sum(latest_in_info.bundle_count) as bundle_count
        FROM
            latest_in_info
                JOIN
            in_out_count ON latest_in_info.unique_identifier = in_out_count.unique_identifier
        WHERE latest_in_info.dimensions NOT LIKE '%*%' and latest_in_info.dimensions NOT LIKE '%锻造材%'
        group by latest_in_info.dimensions
        order by weight asc;
    </select>
    <!-- 饼图管材尺寸 -->
    <select id="getPipeByDimensions" resultType="map">
        WITH in_out_count AS (
            SELECT
                unique_identifier,
                SUM(CASE WHEN operation_type in ('入库','返库') THEN 1 ELSE 0 END) AS in_count,
                SUM(CASE WHEN operation_type = '出库' THEN 1 ELSE 0 END) AS out_count
            FROM
                shipment_details
            WHERE
            time &lt;= #{date}
        GROUP BY
            unique_identifier
        HAVING
            in_count > out_count
            ),
            latest_in_info AS (
        SELECT
            sd.*
        FROM
            shipment_details sd
            JOIN (
            SELECT
            unique_identifier,
            MAX(id) AS latest_id
            FROM
            shipment_details
            WHERE
            (operation_type = '入库' OR operation_type = '转库' OR operation_type = '返库')
            AND time &lt;= #{date}
            GROUP BY
            unique_identifier
            ) sub ON sd.id = sub.latest_id
            )
        SELECT  distinct
            latest_in_info.dimensions,
            sum(latest_in_info.weight) as weight,
            sum(latest_in_info.bundle_count) as bundle_count
        FROM
            latest_in_info
                JOIN
            in_out_count ON latest_in_info.unique_identifier = in_out_count.unique_identifier
        WHERE latest_in_info.dimensions LIKE '%*%' and latest_in_info.dimensions NOT LIKE '%锻造材%'
        group by latest_in_info.dimensions
        order by weight asc;
    </select>
    <!-- 饼图锻造材尺寸 -->
    <select id="getForgByDimensions" resultType="map">
        WITH in_out_count AS (
            SELECT
                unique_identifier,
                SUM(CASE WHEN operation_type in ('入库','返库') THEN 1 ELSE 0 END) AS in_count,
                SUM(CASE WHEN operation_type = '出库' THEN 1 ELSE 0 END) AS out_count
            FROM
                shipment_details
            WHERE
            time &lt;= #{date}
        GROUP BY
            unique_identifier
        HAVING
            in_count > out_count
            ),
            latest_in_info AS (
        SELECT
            sd.*
        FROM
            shipment_details sd
            JOIN (
            SELECT
            unique_identifier,
            MAX(id) AS latest_id
            FROM
            shipment_details
            WHERE
            (operation_type = '入库' OR operation_type = '转库' OR operation_type = '返库')
            AND time &lt;= #{date}
            GROUP BY
            unique_identifier
            ) sub ON sd.id = sub.latest_id
            )
        SELECT  distinct
            REPLACE(latest_in_info.dimensions, '锻造材', '') AS dimensions,
            sum(latest_in_info.weight) as weight,
            sum(latest_in_info.bundle_count) as bundle_count
        FROM
            latest_in_info
                JOIN
            in_out_count ON latest_in_info.unique_identifier = in_out_count.unique_identifier
        WHERE latest_in_info.dimensions  LIKE '%锻造材%'
        GROUP BY
            REPLACE(latest_in_info.dimensions, '锻造材', '')
        order by weight asc;
    </select>
    <!-- 柱形图进出 -->
    <select id="getMonthlyInOutWeightByYear" resultType="map">
        WITH monthly_in_out AS (
            SELECT
                DATE_FORMAT(time, '%Y-%m') AS month,
            SUM(CASE WHEN operation_type in ('入库', '返库') THEN weight ELSE 0 END) AS in_weight,
            SUM(CASE WHEN operation_type = '出库' THEN weight ELSE 0 END) AS out_weight
        FROM
            shipment_details
        WHERE
            YEAR(time) = #{year} -- 根据传入的年份筛选数据
        GROUP BY
            DATE_FORMAT(time, '%Y-%m')
            )
        SELECT
            month,
            in_weight,
            out_weight
        FROM
            monthly_in_out
        ORDER BY
            month;
    </select>
    <!-- 折线图在库 -->
    <select id="getMonthlyCumulativeInventoryStatusByYear" resultType="map">
        WITH in_out_count AS (
            SELECT
                unique_identifier,
                DATE_FORMAT(time, '%Y-%m') AS month,
            SUM(CASE WHEN operation_type in ('入库', '返库') THEN weight ELSE 0 END) AS in_weight,
            SUM(CASE WHEN operation_type = '出库' THEN weight ELSE 0 END) AS out_weight
        FROM
            shipment_details
        WHERE
            YEAR(time) = #{year}
        GROUP BY
            unique_identifier, DATE_FORMAT(time, '%Y-%m')
            ),
            monthly_net AS (
        SELECT
            month,
            SUM(in_weight) AS total_in_weight,
            SUM(out_weight) AS total_out_weight
        FROM
            in_out_count
        GROUP BY
            month
            ),
            cumulative_net AS (
        SELECT
            month,
            SUM(total_in_weight - total_out_weight) OVER (ORDER BY month ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS cumulative_weight
        FROM
            monthly_net
            )
        SELECT
            month,
            cumulative_weight
        FROM
            cumulative_net
        ORDER BY
            month;
    </select>

    <select id="queryShipmentDetails" resultType="map">
        SELECT DISTINCT
        arrival_date,
        steel_mill,
        steel_grade,
        dimensions,
        trade_mode,
        SUM(weight) AS weight,
        invoice_application
        FROM shipment_details
        WHERE operation_type = '入库'
        <if test="startDate != null">
            AND arrival_date BETWEEN #{startDate} AND #{endDate}
        </if>
        <if test="steelGrade != null and steelGrade != ''">
            AND steel_grade = #{steelGrade}
        </if>
        <if test="dimensions != null and dimensions != ''">
            AND dimensions = #{dimensions}
        </if>
        <if test="steelMill != null and steelMill != ''">
            AND steel_mill = #{steelMill}
        </if>
        <if test="invoiceApplication != null">
            <choose>
                <when test="invoiceApplication == 'none'">
                    AND invoice_application IS NULL
                </when>
                <otherwise>
                    AND invoice_application = #{invoiceApplication}
                </otherwise>
            </choose>
        </if>
        GROUP BY arrival_date, steel_mill, steel_grade, dimensions, trade_mode,invoice_application
        order by arrival_date;
    </select>
    <update id="updateInvoiceApplication" parameterType="map">
        UPDATE shipment_details
        SET invoice_application = #{invoice_application}
        WHERE arrival_date = #{arrival_date}
          AND steel_mill = #{steel_mill}
          AND steel_grade = #{steel_grade}
          AND dimensions = #{dimensions}
          AND trade_mode = #{trade_mode}
    </update>
</mapper>
